{"version":3,"sources":["Component/Map.js","Component/Nav.js","App.js","registerServiceWorker.js","index.js","Component/logo.png"],"names":["icons","verysmall","divIcon","className","iconSize","small","verynormal","normal","large","MapView","props","locations","cases","toggles","modals","Nations","Provinces","ct_codes","confirmes","recovers","deaths","new_confirmes","new_recovers","new_deaths","i","cases_covid","Countries","marker","map","location","id","country","country_code","province","coordinates","latitude","longitude","latest","confirmed","color","last_updated","key","CountryCode","TotalRecovered","url_flag","Marker","position","icon","onmouseover","e","target","openPopup","onmouseout","closePopup","onClick","Popup","autoPan","closeButton","style","fontWeight","fontSize","width","height","src","src_flag","format","num","String","replace","overflow","Map","center","zoom","zoomControl","TileLayer","url","attribution","ZoomControl","isOpen","toggle","side","backgroundColor","margin","marginRight","marginLeft","marginTop","pill","Nav","modals_2","total","Global","info","k","total_case","TotalConfirmed_country","new","Country","TotalConfirmed","NewConfirmed","sort","a","b","country_rank","total_rank","new_confirmed","dark","expand","fixed","paddingLeft","logo","alt","left","active","right","borderRadius","fullHeight","float","hover","el","cursor","this","centered","href","fab","App","state","modal12","modal9","modal14","case","nation","recoverd","death","new_recoverd","new_death","showMap","axios","get","then","response","setState","data","catch","error","console","log","nr","modalNumber","NewDeaths","NewRecovered","loading","role","Component","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.a62a749a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Map, TileLayer, Marker, Popup, ZoomControl } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport './Mapmark.css'\r\nimport { divIcon } from 'leaflet';\r\nimport { MDBContainer, MDBModal, MDBModalBody, MDBModalHeader, MDBBadge, MDBIcon } from 'mdbreact';\r\n\r\nconst icons = {\r\n    verysmall: divIcon({\r\n        className: 'marker verysmall', iconSize: [25, 25]\r\n    }),\r\n    small: divIcon({\r\n        className: 'marker small', iconSize: [35, 35]\r\n    }),\r\n    verynormal: divIcon({\r\n        className: 'marker verynormal', iconSize: [45, 45]\r\n    }),\r\n    normal: divIcon({\r\n        className: 'marker normal', iconSize: [60, 60]\r\n    }),\r\n    large: divIcon({\r\n        className: 'marker large', iconSize: [75, 75]\r\n    }),\r\n};\r\n\r\nfunction MapView(props) {\r\n\r\n    const { locations, cases, toggles, modals } = props;\r\n    var { Nations, Provinces, ct_codes } = props;\r\n    var { confirmes, recovers, deaths } = props;\r\n    var { new_confirmes, new_recovers, new_deaths } = props\r\n\r\n    //console.log(locations, cases)\r\n\r\n    var i = 0, k = 0;\r\n    var cases_covid = cases.Countries;\r\n\r\n    const marker = locations.map(location => {\r\n        const { id, country, country_code, province,\r\n            coordinates: { latitude, longitude },\r\n            latest: { confirmed, deaths }, last_updated\r\n        } = location;\r\n\r\n        let color = icons.verysmall;\r\n\r\n        if (confirmed <= 1000) {\r\n            color = icons.verysmall;\r\n        }\r\n        else {\r\n            if (confirmed > 1001 && confirmed <= 5000) {\r\n                color = icons.small;\r\n            }\r\n            else if (confirmed > 5001 && confirmed <= 10000) {\r\n                color = icons.verynormal;\r\n            }\r\n            else if (confirmed > 10001 && confirmed <= 30000) {\r\n                color = icons.normal;\r\n            }\r\n            else {\r\n                color = icons.large;\r\n            }\r\n        }\r\n\r\n        var recovers = 0;\r\n\r\n        for (var key in cases_covid) {\r\n            if (country_code == cases_covid[key].CountryCode) {\r\n                recovers = cases_covid[key].TotalRecovered;\r\n            }\r\n        }\r\n\r\n        var url_flag = \"https://www.countryflags.io/\" + country_code + \"/flat/64.png\";\r\n\r\n        return (\r\n            <Marker\r\n                key={i++}\r\n                position={[latitude, longitude]}\r\n                icon={color}\r\n                onmouseover={e => e.target.openPopup()}\r\n                onmouseout={e => e.target.closePopup()}\r\n                onClick={toggles(9, country, province, country_code, confirmed, deaths)}\r\n            >\r\n                <Popup autoPan={false} className=\"popup\" closeButton={false}>\r\n\r\n                    <br />\r\n                    <center>\r\n                        <span\r\n                            style={{ fontWeight: \"700\", fontSize: \"25px\", color: \"#fafafa\" }}\r\n                        ><MDBIcon icon=\"globe-americas\" /> {country} {province} </span><br />\r\n                        <img style={{ width: \"60px\", height: \"55px\" }} src={url_flag}></img>\r\n                    </center>\r\n                    <br />\r\n\r\n                </Popup>\r\n                {/*<Circle\r\n                    center={{ lat: latitude, lng: longitude }}\r\n                    color= {color}\r\n                radius={radius} />*/}\r\n\r\n            </Marker>\r\n\r\n        )\r\n    });\r\n\r\n    var src_flag = \"https://www.countryflags.io/\" + ct_codes + \"/flat/64.png\";\r\n\r\n    const format = num => {\r\n        return String(num).replace(/(?<!\\..*)(\\d)(?=(?:\\d{3})+(?:\\.|$))/g, '$1,')\r\n    };\r\n\r\n    return (\r\n        <div style={{overflow:\"hidden\"}}>\r\n            <Map style={{ width: \"100vw\", height: \"100vh\"}} center={[13, 100]} zoom={5} zoomControl={false}>\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors<br/>Web developed by Chawalit janinta \"\r\n                />\r\n                <ZoomControl position=\"bottomright\" />\r\n                {marker}\r\n            </Map>\r\n\r\n            {/* Conutry Data */}\r\n            <MDBContainer>\r\n                <MDBModal isOpen={modals} toggle={toggles(9)} side position=\"top-right\">\r\n                    <MDBModalHeader toggle={toggles(9)} style={{ backgroundColor: \"rgba(0, 0, 0, 0.7)\" }}>\r\n                        <span style={{ color: \"#ffffff\", fontWeight: \"650\", fontSize: \"25px\", margin: \"20px\" }} >\r\n                            <MDBIcon icon=\"globe-americas\" style={{ marginRight: \"15px\" }} /> {Nations} {Provinces}\r\n                        </span>\r\n                        <img style={{ width: \"20%\", height: \"5%\" }} src={src_flag}></img>\r\n                    </MDBModalHeader>\r\n                    <MDBModalBody>\r\n                        <h3 style={{ fontWeight: \"600\", color: \"#757575\", marginLeft: \"62px\" ,marginTop:\"15px\"}}>Total</h3>\r\n                        <MDBBadge pill color=\"warning\" className=\"badges\">Confirmed : {format(confirmes)}</MDBBadge><br />\r\n                        <MDBBadge pill color=\"success\" className=\"badges\">Recovered : {format(recovers)}</MDBBadge><br />\r\n                        <MDBBadge pill color=\"danger\" className=\"badges\">Deaths : {format(deaths)}</MDBBadge>\r\n                        <br /><br /><br />\r\n                        <h3 style={{ fontWeight: \"600\", color: \"#757575\", marginLeft: \"62px\" }}>Today</h3>\r\n                        <MDBBadge pill color=\"warning\" className=\"badges\">Confirmed : {format(new_confirmes)}</MDBBadge><br />\r\n                        <MDBBadge pill color=\"success\" className=\"badges\">Recovered : {format(new_recovers)}</MDBBadge><br />\r\n                        <MDBBadge pill color=\"danger\" className=\"badges\">Deaths : {format(new_deaths)}</MDBBadge><br /><br />\r\n                    </MDBModalBody>\r\n                </MDBModal>\r\n            </MDBContainer>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default MapView;","import React from 'react';\r\nimport {\r\n    MDBNavbar,\r\n    MDBNavbarBrand,\r\n    MDBNavItem,\r\n    MDBNavbarNav,\r\n    MDBBadge,\r\n    MDBIcon,\r\n    MDBBtn,\r\n    MDBModalBody,\r\n    MDBModalHeader,\r\n    MDBContainer,\r\n    MDBModal,\r\n    MDBTableHead,\r\n    MDBTable,\r\n    MDBTableBody,\r\n    MDBModalFooter\r\n} from \"mdbreact\";\r\n\r\nimport logo from './logo.png'\r\n\r\nfunction Nav(props) {\r\n\r\n    const { cases, toggles, modals, modals_2 } = props;\r\n\r\n    var total = cases.Global;\r\n    var info = [], i = 0, k = 0;\r\n    for (var key in total) {\r\n        info[i++] = total[key]\r\n    }\r\n\r\n    var total_case = cases.Countries;\r\n\r\n    var TotalConfirmed_country = [{ country: '', total: '', new: '' }];\r\n\r\n    for (key in total_case) {\r\n        TotalConfirmed_country[key] = { country: total_case[key].Country, total: total_case[key].TotalConfirmed, new: total_case[key].NewConfirmed };\r\n    }\r\n    TotalConfirmed_country.sort(function (a, b) { return b.total - a.total })\r\n    //console.log(TotalConfirmed_country)\r\n\r\n    var country_rank = [];\r\n    var total_rank = [];\r\n    var new_confirmed = [];\r\n\r\n    for (key in TotalConfirmed_country) {\r\n        country_rank[key] = TotalConfirmed_country[key].country;\r\n        total_rank[key] = TotalConfirmed_country[key].total;\r\n        new_confirmed[key] = TotalConfirmed_country[key].new;\r\n        k++;\r\n        if (k == 10) {\r\n            break;\r\n        }\r\n    }\r\n    k = 0;\r\n\r\n    const format = num => {\r\n        return String(num).replace(/(?<!\\..*)(\\d)(?=(?:\\d{3})+(?:\\.|$))/g, '$1,')\r\n    };\r\n\r\n    //console.log(country_rank, total_rank)\r\n\r\n    /*info[5]\r\n    NewConfirmed     = info[0]\r\n    TotalConfirmed   = info[1]\r\n    NewDeaths        = info[2]\r\n    TotalDeaths      = info[3]\r\n    NewRecovered     = info[4]\r\n    TotalRecovered   = info[5]\r\n    */\r\n\r\n    return (\r\n\r\n        <div>\r\n\r\n            <MDBNavbar dark expand=\"md\" fixed=\"top\" color=\"rgba-lime-strong\">\r\n                <MDBNavbarBrand style={{ paddingLeft: \"10px\" }}>\r\n                    <img src={logo} alt=\"aligment\" style={{ width: \"45px\", height: \"45px\" }} />\r\n                </MDBNavbarBrand>\r\n\r\n                <MDBNavbarNav left style={{ fontSize: \"25px\", fontWeight: \"600\" }}>\r\n\r\n                    <span style={{ color: \"#4B515D\", fontWeight: \"700\", fontSize: \"24px\", marginRight: \"50px\" }} >Covid-19 Data</span>\r\n                    <MDBNavItem active>\r\n                        <span style={{ color: \"rgba(0, 0, 0, 0.7\", margin: \"30px\" }}>&nbsp; <MDBBadge pill color=\"warning\"><MDBIcon icon=\"caret-right\" /> Total Confirmed : {format(info[1])}</MDBBadge></span>\r\n                    </MDBNavItem>\r\n                    <MDBNavItem active>\r\n                        <span style={{ color: \"rgba(0, 0, 0, 0.7\", margin: \"30px\" }}>&nbsp; <MDBBadge pill color=\"success\"><MDBIcon icon=\"caret-right\" /> Total Recovered : {format(info[5])}</MDBBadge></span>\r\n                    </MDBNavItem>\r\n                    <MDBNavItem active>\r\n                        <span style={{ color: \"rgba(0, 0, 0, 0.7\", margin: \"30px\" }}>&nbsp; <MDBBadge pill color=\"danger\"><MDBIcon icon=\"caret-right\" /> Total Deaths : {format(info[3])}</MDBBadge></span>\r\n                    </MDBNavItem>\r\n                </MDBNavbarNav >\r\n                <MDBNavbarNav right>\r\n                    <MDBBtn onClick={toggles(12)} color=\"deep-orange lighten-2\" style={{ borderRadius: \"5px\" }}><MDBIcon icon=\"globe\" style={{ fontSize: \"22px\" }} /></MDBBtn>\r\n                    <MDBBtn onClick={toggles(14)} color=\"grey darken-1\" style={{ borderRadius: \"5px\" }}><MDBIcon icon=\"info-circle\" style={{ fontSize: \"22px\" }} /></MDBBtn>\r\n                </MDBNavbarNav >\r\n            </MDBNavbar>\r\n\r\n            {/* Global Data */}\r\n            <MDBContainer>\r\n                <MDBModal isOpen={modals} toggle={toggles(12)} fullHeight position=\"left\">\r\n                    <MDBModalHeader toggle={toggles(12)} style={{ backgroundColor: \"rgba(0, 0, 0, 0.7)\" }}>\r\n\r\n                        <span style={{ color: \"#ffffff\", fontWeight: \"700\", fontSize: \"25px\", marginLeft: \"20px\" }} >\r\n                            <MDBIcon icon=\"globe\" style={{ marginRight: \"20px\" }} />\r\n                            Global Data\r\n                        </span>\r\n\r\n                    </MDBModalHeader>\r\n                    <MDBModalBody>\r\n                        <br />\r\n\r\n                        <center><h4 style={{ fontWeight: \"600\", color: \"#757575\" }}>All of today's Data</h4></center><br />\r\n\r\n                        <h5 style={{ fontWeight: \"600\", marginLeft: \"40px\", color: \"#fbc02d\" }}>New Confirmed\r\n                            <span style={{ float: \"right\", marginRight: \"40px\" }}>\r\n                                {format(info[0])}\r\n                            </span>\r\n                        </h5>\r\n\r\n                        <h5 style={{ fontWeight: \"600\", marginLeft: \"40px\", color: \"#81c784\" }}>New Recovered\r\n                            <span style={{ float: \"right\", marginRight: \"40px\" }}>\r\n                                {format(info[4])}\r\n                            </span>\r\n                        </h5>\r\n\r\n                        <h5 style={{ fontWeight: \"600\", marginLeft: \"40px\", color: \"#e57373\" }}>New Deaths\r\n                            <span style={{ float: \"right\", marginRight: \"40px\" }}>\r\n                                {format(info[2])}\r\n                            </span>\r\n                        </h5>\r\n                        <br />\r\n                        <MDBTable hover>\r\n                            <MDBTableHead>\r\n                                <tr>\r\n                                    <th><span style={{ color: \"#ff8a65\", fontSize: \"20px\", fontWeight: \"650\" }}>Country</span></th>\r\n                                    <th><span style={{ color: \"#ffa726\", fontSize: \"19px\", fontWeight: \"650\" }}>Total Confirmed</span></th>\r\n                                </tr>\r\n                            </MDBTableHead>\r\n                            <MDBTableBody>\r\n                                {/*country_rank.map(el => (\r\n                                        <div style={{ color: \"#ff8a65\", fontSize: \"15px\", fontWeight: \"600\", marginTop: \"10px\" }} ><td>{el} </td></div>\r\n                                    ), this)*/\r\n                                }\r\n                                {country_rank.map(el => (\r\n\r\n                                    <tr>\r\n                                        <td style={{ color: \"#ff8a65\", fontSize: \"15px\", fontWeight: \"600\", marginTop: \"10px\", cursor: \"pointer\" }}>{k + 1}.{el}</td>\r\n                                        <td style={{ color: \"#ffa726\", fontSize: \"15px\", fontWeight: \"600\", marginTop: \"10px\", cursor: \"pointer\" }}>\r\n                                            <MDBIcon icon=\"user\" /> : {format(total_rank[k++])}\r\n                                            <span style={{ fontWeight: \"500\", fontSize: \"12px\", color: \"#ef9a9a\", marginLeft: \"11px\" }}><br/>Today : {format(new_confirmed[k - 1])}</span>\r\n                                        </td>\r\n                                    </tr>\r\n\r\n                                ), this)}\r\n\r\n                                {/*total_rank.map(el => (\r\n                                        <div style={{ color: \"#ffa726\", fontSize: \"15px\", fontWeight: \"600\", marginTop: \"10px\" }}><td><MDBIcon icon=\"user\" /> : {el} </td></div>\r\n                                    ), this)*/}\r\n                            </MDBTableBody>\r\n                        </MDBTable>\r\n                    </MDBModalBody>\r\n                </MDBModal>\r\n            </MDBContainer>\r\n\r\n            <MDBContainer>\r\n                <MDBModal isOpen={modals_2} toggle={toggles(14)} centered>\r\n                    <MDBModalHeader toggle={toggles(14)} style={{ backgroundColor: \"rgba(0, 0, 0, 0.7)\" }}>\r\n                        <span style={{ color: \"#ffffff\", fontWeight: \"700\", fontSize: \"25px\", marginLeft: \"20px\" }} >\r\n                            <MDBIcon icon=\"info-circle\" style={{ marginRight: \"20px\" }} />\r\n                            Info\r\n                        </span>\r\n                    </MDBModalHeader>\r\n                    <MDBModalBody>\r\n\r\n                        <div style={{ fontWeight: \"600\", color: \"#757575\", margin: \"15px\" }}>\r\n                            <center>\r\n                                <a href=\"https://github.com/Chawalit-janinta/Covid-19-Realtime-Total-Data\" style={{ fontSize: \"30px\", fontWeight: \"500\", color: \"rgba(0, 0, 0, 0.7)\", margin: \"50px\" }}>\r\n                                    <MDBIcon fab icon=\"github\" className=\"pr-1\" /> Github\r\n                                </a>\r\n                            </center><br />\r\n                            <a href=\"https://github.com/ExpDev07/coronavirus-tracker-api\" style={{ fontSize: \"15px\", fontWeight: \"500\", color: \"rgba(0, 0, 0, 0.7)\", marginLeft: \"30px\" }}>\r\n                                <MDBIcon icon=\"database\" className=\"pr-1\" /> Data Api by ExpDev07\r\n                                </a><br />\r\n                            <a href=\"https://covid19api.com/\" style={{ fontSize: \"15px\", fontWeight: \"500\", color: \"rgba(0, 0, 0, 0.7)\", marginLeft: \"30px\" }}>\r\n                                <MDBIcon icon=\"database\" className=\"pr-1\" /> Data Api by Kyle Redelinghuys\r\n                                </a>\r\n\r\n                        </div>\r\n\r\n                    </MDBModalBody>\r\n                </MDBModal>\r\n            </MDBContainer>\r\n\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Nav;","import React, { Component } from 'react';\r\nimport Map from './Component/Map';\r\nimport Nav from './Component/Nav';\r\nimport axios from 'axios';\r\nconst api_location = 'https://coronavirus-tracker-api.herokuapp.com/v2/locations';\r\nconst api_covid = 'https://api.covid19api.com/summary?fbclid=IwAR1fMdspy-mdK88tkr6qAXeGQckuQPAGx9ptE7rYOaR7VpnJNYJs3Ji-Cjk';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      location: [],\r\n      case: [],\r\n      nation: '',\r\n      province: '',\r\n      confirmed: 0,\r\n      recoverd: 0,\r\n      country_code: '',\r\n      death: 0,\r\n      new_confirmed: 0,\r\n      new_recoverd: 0,\r\n      new_death: 0,\r\n      showMap : false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios.get(api_location)\r\n      .then(response => {\r\n        this.setState({ location: response.data.locations ,showMap:true})\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      })\r\n\r\n    axios.get(api_covid)\r\n      .then(response => {\r\n        this.setState({ case: response.data })\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      })\r\n\r\n  }\r\n\r\n  state = {\r\n    modal12: false,\r\n    modal9: false,\r\n    modal14: false\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    const toggle = (nr, country, province, country_code, confirmed, death) => () => {\r\n      let modalNumber = 'modal' + nr\r\n      this.setState({\r\n        [modalNumber]: !this.state[modalNumber]\r\n      });\r\n\r\n      for (var key in this.state.case.Countries) {\r\n        if (country_code == this.state.case.Countries[key].CountryCode) {\r\n          this.setState({\r\n            nation: country,\r\n            province: province,\r\n            country_code: country_code,\r\n            confirmed: confirmed,\r\n            death: death,\r\n            recoverd: this.state.case.Countries[key].TotalRecovered,\r\n            new_confirmed: this.state.case.Countries[key].NewConfirmed,\r\n            new_death: this.state.case.Countries[key].NewDeaths,\r\n            new_recoverd: this.state.case.Countries[key].NewRecovered,\r\n          })\r\n        }\r\n      }\r\n    }\r\n\r\n    const map = (\r\n      <Map\r\n        locations={this.state.location}\r\n        cases={this.state.case}\r\n        Nations={this.state.nation}\r\n        Provinces={this.state.province}\r\n        confirmes={this.state.confirmed}\r\n        recovers={this.state.recoverd}\r\n        deaths={this.state.death}\r\n        toggles={toggle}\r\n        modals={this.state.modal9}\r\n        ct_codes={this.state.country_code}\r\n        new_confirmes={this.state.new_confirmed}\r\n        new_recovers={this.state.new_recoverd}\r\n        new_deaths={this.state.new_death}\r\n      />\r\n    );\r\n\r\n    const loading = (\r\n      <div style={{ marginTop: '300px' }}>\r\n        <center>\r\n          <div className=\"spinner-border text-danger\" role=\"status\" style={{ width: '100px', height: '100px', margin: '30px' }}>\r\n            <span className=\"sr-only\">Loading...</span>\r\n          </div>\r\n          <h2>Loading ...</h2>\r\n        </center>\r\n      </div>\r\n    );\r\n\r\n    return (\r\n      <div>\r\n        <Nav\r\n          cases={this.state.case}\r\n          toggles={toggle}\r\n          modals={this.state.modal12}\r\n          modals_2={this.state.modal14}\r\n        />\r\n        {this.state.showMap?map:loading}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render( <App /> , document.getElementById('root'));\r\n\r\nregisterServiceWorker();","module.exports = __webpack_public_path__ + \"static/media/logo.475fcdcf.png\";"],"sourceRoot":""}